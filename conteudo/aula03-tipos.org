# -*- coding: utf-8 -*-
# -*- mode: org -*-
#+startup: beamer overview indent
#+LANGUAGE: pt-br
#+TAGS: noexport(n)
#+EXPORT_EXCLUDE_TAGS: noexport
#+EXPORT_SELECT_TAGS: export

#+Title: Algoritmos
#+Subtitle: *INF01202*
#+Author: Prof. Lucas Mello Schnorr
#+Date: \copyleft

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [xcolor=dvipsnames]
#+OPTIONS: title:nil H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+LATEX_HEADER: \input{org-babel.tex}

#+latex: \newcommand{\mytitle}{Tipos de Dados, Declaração e tipos de variáveis, Operadores e expressão aritmética e lógica}
#+latex: \mytitleslide

* Configuração                                                     :noexport:

#+BEGIN_SRC emacs-lisp
(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
(setq org-latex-minted-options
       '(("frame" "lines")
         ("fontsize" "\\scriptsize")))
#+END_SRC

#+RESULTS:
| frame    | lines       |
| fontsize | \scriptsize |
* O que veremos hoje

- Tipos de dados na declaração de variáveis
- Expressões aritméticas e lógicas

* Tipos de dados

- Determina, para uma variável
  - o tamanho de área de memória reservada para o dado
  - os possíveis valores para o conteúdo

#+latex: \pause\vfill

- Na linguagem C, os tipos primitivos são

  | *Tipo*   |    *Tamanho* | *Valores válidos*                     |
  |        | (em bytes) |                                     |
  |--------+------------+-------------------------------------|
  | ~char~   |          1 | Caracteres em Código ASCII          |
  | ~int~    |          4 | -2^31 -- 2^31                         |
  | ~float~  |          4 | -1^S \times M \times 2^E  \approx ± 10^{-38} ... 10^{38}    |
  |        |            | S: 1 bit para o sinal               |
  |        |            | M: 23 bits para a mantissa          |
  |        |            | E: 8 bits para o expoente           |
  | ~double~ |          8 | -1^S \times M \times 2^E  \approx  ± 10^{-308} ... 10^{308} |
  |        |            | S: 1 bit para o sinal               |
  |        |            | M: 52 bits para a mantissa          |
  |        |            | E: 11 bits para o expoente          |

#+latex: \pause

#+BEGIN_CENTER
Melhor jeito de se saber o tamanho é com o comando =sizeof=
#+END_CENTER

* Vejamos um exemplo com sizeof

#+BEGIN_SRC C :tangle e/exemplo-sizeof.c
/* Programa que fornece o tamanho do tipo */
#include <stdio.h>
int main ()
{
  printf ("char     = %d\n", sizeof(char));
  printf ("int      = %d\n", sizeof(int));
  printf ("long int = %d\n", sizeof(long int));
  printf ("float    = %d\n", sizeof(float));
  printf ("double   = %d\n", sizeof(double));
  return 0;
}
#+END_SRC

A implementação destes tipos:
- inteiros, do menor ao maior valor inteiro que cabe no tamanho \\
  https://en.wikipedia.org/wiki/Integer_(computer_science)
- ponto-flutuante (=float=, =double=), veja a norma IEEE 754, em inglês \\
  https://en.wikipedia.org/wiki/IEEE_754
- Vejamos a tabela ASCII para o tipo =char=

* Tabela ASCII

[[./img/asciifull.jpg]]

#+attr_latex: :width .5\linewidth
[[./img/extend.jpg]]
* Presença do tipo na declaração de variáveis

É obrigatório declarar todas as variáveis utilizadas
- O compilador precisa saber da existência delas
  - Reservar espaço na memória, etc

Sintaxe:
- ~<tipo> <nome_da_variável>;~

#+latex: \pause

Nomes das variáveis
- Primeiro caractere: letra, sublinhado
- Demais caracteres: letra, sublinhado, dígitos

#+latex: \pause\vfill

Podemos associar um valor à variável na sua declaração.
- *Inicialização de uma variável*

Sintaxe:
- ~<tipo> <nome_da_variável> = <valor>;~

* Vejamos um exemplo

#+BEGIN_SRC C :tangle e/exemplo-inicializacao-variaveis.c
/* Programa para realizar testes de inicializacao de variaveis na declaracao */
#include <stdio.h>
int main ()
{
  int v = 3;
  printf ("O valor da variavel v eh %d.\n", v);
  return 0;
}
#+END_SRC


#+begin_src shell :results output :dir e
gcc exemplo-inicializacao-variaveis.c -o exemplo-inicializacao-variaveis
./exemplo-inicializacao-variaveis
#+end_src

#+BEGIN_CENTER
Caso não seja inicializada, a variável tem qual valor?
#+END_CENTER

* Tipos no =scanf=

Sintaxe
#+begin_src C
scanf("<formatadores>", <lista de endereços de variáveis>);
#+end_src

Exemplos
#+begin_src C :results output :exports both
int i, j;
float x;
char c;
scanf(" %d", &i);
scanf("%d%f", &j, &x);
scanf(" %c", &c);
#+end_src

| Formatador | Descrição                    |
|------------+------------------------------|
| =%d=  ou =%i=  | número inteiro com base 10   |
| =%f=         | número ponto-flutuante       |
| =%lf=        | número ponto-flutuante duplo |
| =%c=         | caractere                    |

* Tipos no =printf=

Sintaxe
#+begin_src C
printf("<formatadores>", <lista de variáveis>);
#+end_src

Exemplos
#+begin_src C :results output :exports both
int i = 2, j = 3;
float x = 4.5;
char c = 'a';
printf("Resultados i = %d, j = %d\n", i, j);
printf("%d", i);
printf("%d %f", j, x);
printf("%c", c);
#+end_src

| Caractere escapado | Descrição                       |
|--------------------+---------------------------------|
| =\n=                 | uma quebra de linha             |
| =\t=                 | uma tabulação                   |
| =\\=                 | o caractere \ (barra invertida) |
| =\'=                 | o caractere ' (aspas simples)   |
| =\"=                 | o caractere " (aspas duplas)    |
| =\?=                 | o caractere ? (interrogação)    |

* Contantes do pré-processador

Sintaxe
#+begin_src C
#define <identificador em maiúsculas> <valor>
#+end_src

- Uma constate é algo que nunca se altera durante a execução
- O identificador é substituído pelo preprocessador da Linguagem C
  - Em tempo de compilação
- Aparece após as diretivas de =#include= (também do preprocessador)
- O identificador sempre em letras maiúsculas

#+latex: \pause

Vejamos exemplos de constantes
#+begin_src C
#include <stdio.h>
#define QUANTIDADE 30
int main() {
  int x;
  x = QUANTIDADE;
  return 0;
}
#+end_src

* O comando de atribuição ===

Sintaxe
#+begin_src C
<identificador> = <expressão>;
#+end_src

Atribui o valor da direita (após avaliação da expressão) para a
variável cujo identificador está à esquerda do símbolo igual

#+BEGIN_CENTER
Do lado direito da atribuição, temos uma *expressão*.
#+END_CENTER

O que é uma expressão?

* Expressões aritméticas

Sintaxe
#+begin_src C
<operando> <operador> <operando>
#+end_src

=Operando= corresponde a uma constante, variável, ou outra expressão

=Operador= é um operador aritmético

Operadores aritméticos sem utilizar bibliotecas externas

| Operador | Exemplo | Descrição                           |
|----------+---------+-------------------------------------|
| +        | x + y   | Soma x e y                          |
| -        | x - y   | Subtrai y de x                      |
| *        | x * y   | Multiplica x e y                    |
| =/=        | x / y   | Divide x por y                      |
| %        | x % y   | Resto da divisão inteira de x por y |

Para o operador =/=
- Se numerador for inteiro, a divisão é inteira
- Se numerador for ponto-flutuante, a divisão é ponto-flutuante
- Se y for zero, resultado indeterminado (Not a Number - =NaN=, ou =Inf=)

#+BEGIN_CENTER
Todos estes operadores fazem parte da linguagem C.
#+END_CENTER

* Exemplo do uso de operadores aritméticos

#+BEGIN_SRC C :tangle e/exemplo-operadores-aritmeticos.c
/* Programa para ilustrar funcionamento dos operadores aritmeticos */
#include <stdio.h>
int main ()
{
  int val_1, val_2;
  int divisao, resto;

  val_1 = 13;
  val_2 = 5;
  divisao = val_1 / val_2;
  resto = val_1 % val_2;
  printf("Divisao inteira = %d Resto = %d\n", divisao, resto);
  return 0;
}
#+END_SRC

#+begin_src shell :results output :dir e
gcc exemplo-operadores-aritmeticos.c -o exemplo-operadores-aritmeticos
./exemplo-operadores-aritmeticos
#+end_src

#+RESULTS:
: Divisão inteira = 2 Resto = 3

* Vejamos o emprego do operador resto (=%=)

Cálculo do número de botes salva-vidas necessários em um barco

** Com botes de 23 lugares

 #+BEGIN_SRC C
int passageiros = 950;
int lugares_no_bote = 23;
printf("%d %d\n",
       passageiros / lugares_no_bote,
       passageiros % lugares_no_bote);
 #+END_SRC

 #+RESULTS:
 : 41 7

** Com botes de 25 lugares

 #+BEGIN_SRC C
int passageiros = 950;
int lugares_no_bote = 25;
printf("%d %d\n",
       passageiros / lugares_no_bote,
       passageiros % lugares_no_bote);
 #+END_SRC

 #+RESULTS:
 : 38 0

* Funções matemáticas mais complexas com =math.h=

| Função | Exemplo   | Descrição                           |
|--------+-----------+-------------------------------------|
| ceil   | ceil(x)   | Arredonda o número real para cima   |
| floor  | floor(x)  | Arredonda o número real para baixo  |
| sin    | sin(x)    | Seno de x (sendo x em radianos)     |
| cos    | cos(x)    | Cosseno de x (sendo x em radianos)  |
| tan    | tan(x)    | Tangente de x (sendo x em radianos) |
| exp    | exp(x)    | e elevado à potência x              |
| fabs   | fabs(x)   | Valor absoluto de x (módulo)        |
| log    | log(x)    | Logaritmo natural de x              |
| log10  | log10(x)  | Logaritmo decimal de x              |
| pow    | pow(x, y) | Calcula x elevado à potência y      |
| sqrt   | sqrt(x)   | Raiz quadrada de x                  |

Existem muitas outras
- https://en.wikipedia.org/wiki/C_mathematical_functions

* Exemplo de operações matemáticas

#+BEGIN_SRC C :tangle e/exemplo-com-biblioteca-math.c
/* Programa para ilustrar funcionamento de algumas
   operacoes aritmeticas mais complexas. */
#include <stdio.h>
#include <math.h>
int main(void)
{
  float val_1;
  printf("Entre com valor float: ");
  scanf("%f", &val_1);

  printf("Valor fornecido como entrada: [%f]\n", val_1);
  printf("Resultado do ceil           : [%f]\n", ceil(val_1));
  printf("Resultado do floor          : [%f]\n", floor(val_1));
  printf("Resultado do round          : [%f]\n", round(val_1));
  return 0;
}
#+END_SRC


#+begin_src shell :results output :dir e
gcc exemplo-com-biblioteca-math.c -o exemplo-com-biblioteca-math -lm
./exemplo-com-biblioteca-math
#+end_src

* Precedência e associatividade de operadores em C

#+latex: %\cortesia{../../../Algoritmos/Marcelo/aulas/aula03/aula03_slide_25.pdf}{Prof. Marcelo Walter}

| Ordem | Operador |
|-------+----------|
|     1 | Funções  |
|     2 | ~*~ ~/~ ~%~    |
|     3 | ~+~ ~-~      |

Google: ``precedence order in c''
Wikipedia: https://en.wikipedia.org/wiki/Operators_in_C_and_C%2B%2B#Operator_precedence

Podemos usar parênteses para modificar a precedência:
#+begin_src C :exports code
val_final = val1 * val2 + 5;
val_final = val1 * (val2 + 5);
#+end_src

#+BEGIN_CENTER
Qual é a associatividade de operadores?

Exemplo ilustrativo: =a + b + c=
#+END_CENTER

* Equivalência entre álgebra e C

| Álgebra             | C                                   |
|---------------------+-------------------------------------|
| $\frac{a+b+c+d}{4}$ | (a + b + c + d)/4                   |
|                     |                                     |
| $\frac{b}{4ad}$     | b / (4 * a *d)                      |
|                     |                                     |
| $(a+b)^2$            | pow(a + b, 2);                      |
|                     |                                     |
| $\frac{1+c}{a-b}$   | (1 + c) / ( a - b)                  |
|                     |                                     |
| $4\pi r^3$             | 4 * =M_PI= * pow(r, 3)                |
|                     | assumindo =M_PI= definido como abaixo |

#+begin_src C :results output :exports both
#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif
#+end_src

* Relação entre tipos e expressões aritméticas

Vejamos um exemplo representativo

#+BEGIN_SRC C :tangle e/exemplo-tipos-expressoes-aritmeticas.c
/* Exemplo para ilustrar um problema com expressoes aritmeticas */
#include<stdio.h>
int main()
{
  float num_real;
  int x=1, y=2, z=1;

  num_real = x/2 + y/2 + z/2;

  printf("Resultado: [%f]\n", num_real);
  return 0;
}
#+END_SRC

Qual é o resultado?

#+latex: \pause

#+begin_src shell :exports both :dir e
gcc exemplo-tipos-expressoes-aritmeticas.c -o exemplo-tipos-expressoes-aritmeticas
./exemplo-tipos-expressoes-aritmeticas
#+end_src

#+RESULTS:
: Resultado: [1.000000]

#+latex: \pause\vfill

#+begin_center
Constatação: resultados parciais são do tipo inteiro
#+end_center

#+latex: %\cortesia{../../../Algoritmos/Marcelo/aulas/aula03/aula03_slide_26.pdf}{Prof. Marcelo Walter}

* Modeladores (/casts/) para explicitamente trocar o tipo

#+BEGIN_SRC C :tangle e/exemplo-tipos-expressoes-aritmeticas-cast.c
/* Exemplo para ilustrar um problema com expressoes aritmeticas */
#include <stdio.h>
int main()
{
  float num_real_0, num_real_1, num_real_2, num_real_3;  // variaveis reais
  int x=1, y=2, z=1; // valores inteiros – inicializados na declaracao

  num_real_0 = x/2        + y/2        +        z/2;
  num_real_1 = (float)x/2 + y/2        +        z/2;
  num_real_2 = (float)x/2 + (float)y/2 +        z/2;
  num_real_3 = (float)x/2 + (float)y/2 + (float)z/2;

  printf("Resultados -> "
	 "C0: [%f] "
	 "C1: [%f] "
	 "C2: [%f] "
	 "C3: [%f]\n", num_real_0, num_real_1, num_real_2, num_real_3);
  return 0;
}
#+END_SRC

#+latex: \pause\scriptsize

#+begin_src shell :results output :dir e
gcc exemplo-tipos-expressoes-aritmeticas-cast.c -o exemplo-tipos-expressoes-aritmeticas-cast
./exemplo-tipos-expressoes-aritmeticas-cast
#+end_src

#+RESULTS:
: Resultados -> C0: [1.000000] C1: [1.500000] C2: [1.500000] C3: [2.000000]

* Operadores de Atribuição (atalhos)

#+latex: %\cortesia{../../../Algoritmos/Claudio/Teorica/Aula03-algoritmo_e_estrutura_C_slide_10.pdf}{Prof. Claudio Jung}

| *Operador* | *Exemplo* | *Comentário*               |
|----------+---------+--------------------------|
| ~=~        | ~x = y;~  | Atribui o valor de y a x |
| ~++~       | ~x++;~    | x = x + 1                |
| ~--~       | ~x--;~    | x = x - 1                |
| ~+=~       | ~x += y;~ | x = x + y                |
| ~-=~       | ~x -= y;~ | x = x - y                |
| ~*=~       | ~x *= y;~ | x = x * y                |
| ~/=~       | ~x /= y;~ | x = x / y                |
| ~%=~       | ~x %= y;~ | x = x % y                |

* Exercício

Fazer um algoritmo que, desconsiderando a parte fracionária, centavos,
(1) leia um valor inteiro; (2) calcule o menor número de notas
necessárias para completar este valor. Assuma que as notas correntes
no real são 200, 100, 50, 20, 10, 5, 2 e 1 (incluindo aqui também a
moeda). O algoritmo deve gerar o menor número possível de notas no
total.

Entradas: valor inteiro representando um valor em reais.

Saída: listagem da menor quantidade de notas que representa o valor.

* Algoritmo

#+begin_example
algoritmo calculanotas;
/* calcula o nro mínimo de notas cujo valor total seja igual a um
valor dado
entradas: valor (inteiro)
saídas: n200, n100, n50, n20, n10, n5, n2 e n1 ( notas ) */
1. início
2. ler valor
3. v = valor        // copia para outra variável, para preservar valor lido
4. n200 = v div 200 // quociente da divisao inteira entre v e 200
5. v = v mod 200    // resto da divisao inteira entre v e 200
6. n100 = v div 100
7. v = v mod 100
8. n50 = v div 50
9. v = v mod 50
// ...
#+end_example

* Programa =exemplo-notas.c=

#+attr_latex: :options fontsize=\tiny
#+BEGIN_SRC C :tangle e/exemplo-notas.c
/* Calcula quantidade de cada cédula (ou moeda) tal que a soma dos
   valores totalize um valor inteiro dado.
   Entrada: valor inteiro
   Saida: quandidade de cedulas/moedas de 200, 100, 50, 20, 10, 5, 2 e 1
   reais */
#include <stdio.h>
int main( )
{
  int valor, v; //valores inteiros lido e usado nos cálculos
  int n200, n100, n50,n20,n10,n5,n2,n1;
  printf("Informe valor inteiro:");
  scanf("%d", &valor);
  v = valor; // copia, para preservar valor lido
  n200 = v/200; // RESULTADO DA DIVISÃO INTEIRA POR 100
  v = v%200;    // RESTO DA DIVISÃO INTEIRA POR 100
  n100 = v/100; // RESULTADO DA DIVISÃO INTEIRA POR 100
  v = v%100;    // RESTO DA DIVISÃO INTEIRA POR 100
  n50 = v/50;
  v = v%50;
  n20 = v/20;
  v = v%20;
  n10 = v/10;
  v = v%10;
  n5 = v/5;
  v = v % 5;
  n2 = v/2;    // RESULTADO DA DIVISÃO INTEIRA POR 2
  n1 = v%2;    // RESTO DA DIVISÃO INTEIRA POR 2

  //quebra 2 linhas e insere caracteres ,00 depois do valor:
  printf("\n\nValor lido: R$%d,00\n",valor); // insere vírgula zero
  printf("notas de 200: %d\n",n100);
  printf("notas de 100: %d\n",n100);
  printf("notas de 50: %d\n",n50);
  printf("notas de 20: %d\n",n20);
  printf("notas de 10: %d\n",n10);
  printf("notas de 5: %d\n",n5);
  printf("notas de 2: %d\n",n2);
  printf("notas de 1: %d\n",n1);
  return 0;
}
#+END_SRC

* Exercício

Fazer um algoritmo que (1) leia um valor real, com casas decimais; (2)
tranforme este valor real em dois valores inteiros correspondentes,
respectivamente, à parte inteira e à parte decimal (centavos) do valor
lido (se o valor lido for 123,98, =parte_inteira= deve receber 123 e
=parte_decimal= deve receber 98); (3) calcule o menor número de notas e
moedas necessárias para completar este valor. Lembre que as notas
correntes no real são 100, 50, 20, 10, 5, 2 e 1 (incluindo aqui também
a moeda) e as moedas 50, 25, 10, 5 e 1 centavos; (4) implemente um
programa em C que o implementa.

