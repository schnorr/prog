# -*- coding: utf-8 -*-
# -*- mode: org -*-
#+startup: beamer overview indent
#+LANGUAGE: pt-br
#+TAGS: noexport(n)
#+EXPORT_EXCLUDE_TAGS: noexport
#+EXPORT_SELECT_TAGS: export

#+Title: Algoritmos
#+Subtitle: *INF01202*
#+Author: Prof. Lucas Mello Schnorr
#+Date: \copyleft

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [xcolor=dvipsnames]
#+OPTIONS: title:nil H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+LATEX_HEADER: \input{org-babel.tex}

#+latex: \newcommand{\mytitle}{Comando Condicional de Seleção =if= \\ e Expressões Lógicas}
#+latex: \mytitleslide

* Sumário

- Expressões lógicas
  - Operadores lógicos
  - Precedência de operadores
  - Operadores relacionados
- Comando condicional =if=
  - Com um único comando
  - Com múltiplos comandos
- Exemplo

* Motivação para operadores lógicos (ou /booleanos/)

Em várias situações precisamos expressar decisões lógicas


#+latex: \vfill

Podemos fazer uma analogia com situações do dia-a-dia
- Vou à praia se tiver sol *e* tiver dinheiro
- Vou visitar amigo, se for dia do amigo *ou* é final desemana

#+latex: \vfill\pause

Baseado nos regramentos acima
- Hoje tem sol. Vou à praia?
- Hoje é sábado. Visito o amigo?

* Expressões lógicas com operadores lógicos

Fundamentos básicos
| Operador C | Tipo    | Significado        | Exemplo |
|------------+---------+--------------------+---------|
| =&&=         | binário | um "e" lógico      | x && y  |
| \vert\vert         | binário | um "ou" lógico     | x \vert\vert y  |
| =!=          | unário  | uma negação lógica | !x      |

#+latex: \vfill\pause

#+begin_center
Tabelas de relacionamento
#+end_center

** Left                                                              :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.3
:END:
"e" lógico
| =&&= | V | F |
|----+---+---|
| V  | V | F |
| F  | F | F |

** Center                                                            :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.3
:END:
"ou" lógico
| \vert\vert | V | F |
|----+---+---|
| V  | V | V |
| F  | V | F |

** Right                                                             :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.3
:END:
negação lógica
| entrada | V | F |
|---------+---+---|
|         | F | V |

** Ignore                                                  :B_ignoreheading:
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:

#+latex: \vfill\pause

Na linguagem C, as expressões lógicas retornam um *valor*
- Se falso, o valor é 0
- Se verdadeiro, o valor é diferente de 0

* Operadores relacionais

| Operador | Exemplo | Significado                        |
|----------+---------+------------------------------------|
| ==       | x == y  | Conteúdo de x é igual ao de y?     |
| !=       | x != y  | Conteúdo de x é diferente do de y? |
| <=       | x <= y  | Conteúdo de x é menor igual que y? |
| >=       | x >= y  | Conteúdo de x é maior igual que y? |
| <        | x < y   | Conteúdo de x é menor que y?       |
| >        | x > y   | Conteúdo de x é maior que y?       |

#+latex: \vfill\pause

Na linguagem C, as expressões relacionais também retornam um *valor*
- Se falso, o valor é 0
- Se verdadeiro, o valor é diferente de 0

* Podemos combinar operadores lógicos e relacionais

Sintaxe na Linguagem C, um =<operando>= pode ser uma expressão
- aritmética, lógica ou relacional
#+begin_src C
<operando> <operador aritmético> <operando>
// ou
<operando> <operador lógico> <operando>
// ou
<operando> <operador relacional> <operando>
#+end_src

#+latex: \vfill\pause

Alguns exemplos
#+begin_src C
(a > b) || (c < d)
valor > 10
!(a + c < b)
(a == b)
(a == b) && (a>=c)
(a != b)
!((a >= b) || (a+c))
#+end_src

* Vejamos na prática (=exemplo-logicos.c=)
#+BEGIN_SRC C :tangle e/exemplo-logicos.c
/* Programa que calcula algumas expressões lógicas */
#include <stdio.h>
int main() {
  int a, b, c, d, valor;          //Entrada
  a = 1;
  b = 3;
  c = 5;
  d = 7;
  valor = 9;
  int e1, e2, e3, e4, e5, e6, e7; //Saída

  e1 = (a > b) || (c < d);
  e2 = valor > 10;
  e3 = !(a + c < b);
  e4 = (a == b);
  e5 = (a == b) && (a>=c);
  e6 = (a != b);
  e7 = !((a >= b) || (a+c));

  printf("Entradas: a=%d, b=%d, c=%d, d=%d, valor=%d\n",
	 a, b, c, d, valor);
  printf("Saídas: e1=%d, e2=%d, e3=%d, e4=%d, e5=%d, e6=%d, e7=%d\n",
	 e1, e2, e3, e4, e5, e6, e7);
  return 0;
}
#+END_SRC

* Cuidados com a bagagem de conhecimento da matemática

#+begin_center
Quero saber se uma variável inteira está no intervalo entre 1 e 100.
#+end_center

#+latex: \vfill

Na matemática, escrevemos
#+begin_example
(0 < codigo < 101)
#+end_example

O problema é que esse código é válido sintaticamente
- Mas semânticamente não corresponde ao enunciado

#+latex: \vfill\pause

Na Linguagem C (e na maioria das linguagens de programação)
#+begin_src C
(codigo > 0 && codigo < 101)
// ou
(codigo >= 1 && codigo <= 100)
#+end_src

* Precedência de operadores
** Left                                                              :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.4
:END:
| Ordem | Operador        |
|-------+-----------------|
|     1 | ! funções       |
|     2 | * / %           |
|     3 | + -             |
|     4 | < > <= >=       |
|     5 | != @@latex:==@@ |
|     6 | &&              |
|     7 | \vert\vert              |

Versão completa desta tabela
#+latex: {\tiny
[[https://en.wikipedia.org/wiki/Operators_in_C_and_C++][URL Wikipedia]]
#+latex: }

#+latex: %\cortesia{../../../Algoritmos/Mara/Teoricas/Aula04-If_else_slide_13.pdf}{Prof. Mara Abel}

** Right                                                             :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.6
:END:

#+latex: \vfill\pause

#+begin_center
Exemplo
#+end_center

#+begin_src C
(x != 10 || y > 1 && y < 10)
#+end_src

Pela precedência:
1. Operadores > e < são resolvidos
2. Operador diferente !=
3. Operadores lógicos, && primeiro
4. Por fim, o || lógico

#+latex: \vfill\pause

Podemos empregar parenteses
- Para deixar mais claro quando em dúvida
- Para alterar a precedência da avaliação

* Testes com os exemplos

Vamos assumir o mesmo exemplo anterior com valores
#+begin_src C
int x = 10;
int y = 1;
int z = x != 10 || y > 1 && y < 10;
printf("%d\n", z);
#+end_src

Qual o valor de z impresso no =printf=?

#+latex: \vfill\pause

#+BEGIN_CENTER
Vejamos como fica em _formato de árvore_, com regras de precedência.
#+END_CENTER

* Motivação para comandos de seleção condicional

Programação estruturada, três princípios
1. Sequencialidade
2. Desvio
3. Repetição

#+latex: \vfill

Já vimos a sequencialidade de comandos

Agora vamos ver o princípio de "Desvio"
- Podemos bifurcar a execução de um programa
  - Sempre baseado em uma expressão lógica/aritmética/relacional

* Comandos de seleção condicional

Existem três estruturas na Linguagem C que implementam "Desvio"

#+begin_center
Condicional simples
#+end_center
#+begin_src C
if (<condição>) {
  <comando>;
}
#+end_src

#+latex: \pause

#+begin_center
Condicional duplo
#+end_center
#+begin_src C
if (<condição>) {
  <comando>
}else{
  <comando>
}
#+end_src

#+latex: \pause

#+begin_center
Seleção múltipla
#+end_center
#+begin_src C
switch(<condição>) {
case <valor1>: <comando1>;
case <valor2>: <comando2>;
//...
default: <comando3>;
}
#+end_src

* Comando =if= (condicional simples, com único comando)

O comando =if= na Linguagem C, com um único comando condicionado
#+begin_src C
if (<expressão>)
  <comando>;
#+end_src

Em linguagem algorítmica
#+begin_example
se <expressão>
  <comando>
#+end_example

* Exemplo #1

Ler um valor e, no caso de ser menor do que 10, emitir uma mensagem

#+latex:\pause
Em algoritmo
#+begin_example
1. Início
2. Ler valor na variável var
3. Se var < 10
3.1  Escrever mensagem de alerta
4. Terminar
#+end_example

#+latex: \pause
Na Linguagem C
#+begin_src C
#include <stdio.h>

int main() {
  int var;
  printf("Forneça um valor inteiro:\n");
  scanf("%d", &var);
  if(var < 10)
    printf("O valor fornecido %d é menor que 10.\n", var);
  return 0;
}
#+end_src

* Exemplo #2 (Enunciado e Algoritmo)

Processar uma venda de livros em uma livraria. Obter código do tipo de
livro vendido (A, B, C) e número de unidades, calcular e informar
valor a pagar. Preços: Tipo A, R$ 10,00; Tipo B, R$ 20,00; Tipo C, R$
30,00. Caso tenham sido vendidos mais de 10 livros, emitir uma
mensagem.

#+latex: \pause\vfill

Algoritmo básico

1. Início
2. Ler =codigo=, =nro_livros=
3. "calcular o preco a pagar" (=valor_total=)
4. _informar na saída o conteúdo de =valor_total=_
5. se =nro_livros= > 10
   1. Informar "mais de 10 livros vendidos"
6. Fim.

* Exemplo #2 (Enunciado e Algoritmo Completo)

Algoritmo completo

1. Início
2. Ler =codigo=, =nro_livros=
3. "calcular o preco a pagar" (=valor_total=)
4. se =codigo= == 'A'
   1. =valor_total= <- =nro_livros= * 10;
4. se =codigo= == 'B'
   1. =valor_total= <- =nro_livros= * 20;
4. se =codigo= == 'C'
   1. =valor_total= <- =nro_livros= * 30;
5. se =nro_livros= > 10
   1. Informar "mais de 10 livros vendidos"
6. Fim.

* Exemplo #2 (Código em C)

#+BEGIN_SRC C :tangle e/exemplo-livros.c
/* processa uma venda e avisa caso se mais de 10
unidades vendidas foram vendidas */
#include<stdio.h>
int main(void)
{
  char codigo;
  int nro_livros;
  float valor_total;
  printf("digite o codigo do produto e número de unidades:\n");
  scanf(" %c %d", &codigo, &nro_livros);
  if (codigo == 'a' || codigo == 'A')
    valor_total = nro_livros*10;
  if (codigo == 'b' || codigo == 'B')
    valor_total = nro_livros*20;
  if (codigo == 'c' || codigo == 'C')
    valor_total = nro_livros*30;
  printf("o valor a pagar é de R$ %6.2f.\n", valor_total);
  if (nro_livros > 10)
    printf("Foram vendidas mais de 10 unidades do tipo %c.\n", codigo);
  return 0;
}
#+END_SRC

#+begin_src shell :results output :dir e
gcc exemplo-livros.c -o exemplo-livros
#./exemplo-livros
#+end_src

#+RESULTS:

* Exemplo #3 (Enunciado)

Dados um par de valores x e y, que representam as coordenadas de um
ponto no plano, determinar a localização do ponto: se em um quadrante,
em um dos eixos ou na origem.

#+latex: \vfill

Saída: uma mensagem adequada

Entradas: coordenadas x e y de um ponto

Processamento: testes condicionais, verificando a coordenada

* Exemplo #3 (Ententendo o Enunciado)

#+latex: \cortesia{../../../Algoritmos/Edison/Teoricas/aula04_slide_35.pdf}{Prof. Edison Pignaton de Freitas}

* Exemplo #3 (Pensamento Computacional \to Passos)

Algoritmo

1. Início
1. Leitura dos valores x e y
2. Se x é 0 e y é 0
   1. Escrever "ponto na origem"
4. Se x > 0 e y > 0
   1. Escrever "Quadrante 1"
5. Se x < 0 e y > 0
   1. Escrever "Quadrante 2"
6. Se x < 0 e y < 0
   1. Escrever "Quadrante 3"
7. Se x > 0 e y < 0
   1. Escrever "Quadrante 4"
3. Se x é 0 e y diferente de 0
   1. Escrever "Eixo dos Ys"    
3. Se x diferente de 0 e y é 0
   1. Escrever "Eixo dos Xs"  
8. Fim

* Exemplo #3 (Código em C)

#+BEGIN_SRC C :tangle e/exemplo-coordenadas.c
/* Obtem coordenadas e informa localização */
#include <stdio.h>
int main() {
  float x, y; //Entrada
  printf("Coordenadas: x = ");
  scanf("%f", &x);
  printf("e y = ");
  scanf("%f", &y);
  if ( x == 0 && y == 0 )
    printf("Ponto na origem.\n");
  if ( x > 0 && y > 0 )
    printf("Ponto no quadrante 1.\n");
  if ( x < 0 && y > 0 )
    printf("Ponto no quadrante 2.\n");
  if ( x < 0 && y < 0 )
    printf("Ponto no quadrante 3.\n");
  if ( x > 0 && y < 0 )
    printf("Ponto no quadrante 4.\n");
  if ( x == 0 && y != 0 )
    printf("Ponto no eixo dos y.\n");
  if ( x != 0 && y == 0 )
    printf("Ponto no eixo dos x.\n");
  return 0;
}
#+END_SRC

#+begin_src shell :results output :dir e
gcc exemplo-coordenadas.c -o exemplo-coordenadas
./exemplo-coordenadas
#+end_src

#+RESULTS:
: 
:  Coordenadas: x = e y = 
:  Ponto na origem
* Comando =if= (cond. composto, com múltiplos comandos)

O comando =if= na Linguagem C, com um único comando condicionado
#+begin_src C
if (<expressão>) {
  <comando1>;
  <comando2>;
  <cmoando3>;
}
#+end_src

Em linguagem algorítmica
#+begin_example
se <expressão>
  <comando1>
  <comando2>
  <comando3>
#+end_example

* Exemplo #4 (Livros, com desconto)

Processar uma venda de livros em uma livraria. Obter código do tipo de
livro vendido (A, B, C) e número de unidades, calcular e informar
valor a pagar. Preços: Tipo A, R$ 10,00; Tipo B, R$ 20,00; Tipo C, R$
30,00. Caso tenham sido vendidos mais de 10 livros, emitir uma
mensagem. *Se o livro for do Tipo A, dar 10% de desconto.*

#+latex: \pause\vfill

Algoritmo completo

1. Início
2. Ler =codigo=, =nro_livros=
3. "calcular o preco a pagar" (=valor_total=)
4. se =codigo= == 'A'
   1. =valor_total= <- =nro_livros= * 10;
   2. =valor_total= <- =valor_total= * 0.9;
5. se =codigo= == 'B'
   1. =valor_total= <- =nro_livros= * 20;
6. se =codigo= == 'C'
   1. =valor_total= <- =nro_livros= * 30;
7. se =nro_livros= > 10
   1. Informar "mais de 10 livros vendidos"
8. Fim.

* Exemplo #4 (Código em C)

#+BEGIN_SRC C :tangle e/exemplo-livros-desconto.c
/* processa uma venda e avisa caso se mais de 10
unidades vendidas foram vendidas */
#include<stdio.h>
int main(void)
{
  char codigo;
  int nro_livros;
  float valor_total;
  printf("digite o codigo do produto e número de unidades:\n");
  scanf(" %c %d",&codigo, &nro_livros);
  if (codigo == 'a'|| codigo == 'A') {
    valor_total = nro_livros*10;
    valor_total = valor_total * 0.90;
  }
  if (codigo == 'b'|| codigo == 'B')
    valor_total = nro_livros*20;
  if (codigo == 'c' || codigo == 'C')
    valor_total = nro_livros*30;
  printf("o valor a pagar é de R$ %6.2f.\n", valor_total);
  if (nro_livros > 10)
    printf("Foram vendidas mais de 10 unidades do tipo %c.\n", codigo);
  return 0;
}
#+END_SRC


#+begin_src shell :results output :dir e
gcc exemplo-livros-desconto.c -o exemplo-livros-desconto
#./exemplo-livros-desconto
#+end_src

* Cuidados nos erros comuns

Confundir atribuição com comparação igual

Esquecer as chaves em comando condicional com múltiplos comandos
