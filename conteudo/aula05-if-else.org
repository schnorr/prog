# -*- coding: utf-8 -*-
# -*- mode: org -*-
#+startup: beamer overview indent
#+LANGUAGE: pt-br
#+TAGS: noexport(n)
#+EXPORT_EXCLUDE_TAGS: noexport
#+EXPORT_SELECT_TAGS: export

#+Title: Algoritmos
#+Subtitle: *INF01202*
#+Author: Prof. Lucas Mello Schnorr
#+Date: \copyleft

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [xcolor=dvipsnames]
#+OPTIONS: title:nil H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+LATEX_HEADER: \input{org-babel.tex}

#+latex: \newcommand{\mytitle}{Comandos condicionais (Parte 2)}
#+latex: \mytitleslide

* Configuração                                                     :noexport:

#+BEGIN_SRC emacs-lisp
(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
(setq org-latex-minted-options
       '(("frame" "lines")
         ("fontsize" "\\scriptsize")))
#+END_SRC

#+RESULTS:
| frame    | lines       |
| fontsize | \scriptsize |

* Sumário

Comando =if-else=
- Normais
  - Condicional Simples (=if=)
  - Condicional com caminho duplo (=if - else=)
  - Condicional com caminhos múltiplos (=if - else if - else=)
  - Seleção múltipla (=switch=)
- Biblioteca =ctype.h= (funções =toupper= e =tolower=)
- Comandos condicionais aninhados

* Condicional de caminho duplo: funcionamento

Na Linguagem C
#+begin_src C
if (expressão) {
  //comandos se verdade
} else {
  //comandos se falso
}
#+end_src

Em linguagem algorítmica
#+begin_example
se (expressão)
   // comandos se verdade
senão
   // comandos se falso
#+end_example

* Exemplo em Algoritmo

Fazer um programa que leia um número natural e

informe se o número lido é par ou ímpar.

#+begin_example
Algoritmo Par ou Impar
Entrada: valor informado pelo usuário
Saída: "Par" ou "Impar"

1. Início
2. Ler o valor
3. Se (valor for par)
      Escrever "Par"
   Senão
      Escrever "Impar"
4. Fim
#+end_example

* Exemplo em C

Veja em [[./a05-par-impar.c]]

#+begin_src C :tangle e/a05-par-impar.c
// Programa para verificar se um nro natural lido é par ou impar
// Analisa o resto da divisao inteira por 2
#include<stdio.h>
int main()
{
  int valor;
  printf("Digite o valor a ser testado: ");
  scanf("%d", &valor);

  //analisa resto da divisao inteira
  if (valor%2 == 0){
    printf("Valor eh par!\n");
  } else {
    printf("Valor eh impar!\n");
  }
  return 0;
}
#+end_src
* Relembrando a venda de livros

#+BEGIN_SRC C :tangle e/relembrando-exemplo-livros.c
/* processa uma venda e avisa caso se mais de 10
unidades vendidas foram vendidas */
#include<stdio.h>
int main(void)
{
  char codigo;
  int nro_livros;
  float valor_total;
  printf("digite o codigo do produto e número de unidades:\n");
  scanf(" %c %d", &codigo, &nro_livros);
  if (codigo == 'a' || codigo == 'A')
    valor_total = nro_livros*10;
  if (codigo == 'b' || codigo == 'B')
    valor_total = nro_livros*20;
  if (codigo == 'c' || codigo == 'C')
    valor_total = nro_livros*30;
  printf("o valor a pagar é de R$ %6.2f.\n", valor_total);
  if (nro_livros > 10)
    printf("Foram vendidas mais de 10 unidades do tipo %c.\n", codigo);
  return 0;
}
#+END_SRC

Há uma "redundância" desnecessária nos testes.
- As condições lógicas são mutualmente exclusivas

* Condicional com caminhos múltiplos (=if-else if-else=)

Empregando condicional com caminhos múltiplos

#+BEGIN_SRC C :tangle e/revisitando-exemplo-livros.c
/* processa uma venda e avisa caso se mais de 10
unidades vendidas foram vendidas */
#include<stdio.h>
int main(void)
{
  char codigo;
  int nro_livros;
  float valor_total;
  printf("digite o codigo do produto e número de unidades:\n");
  scanf(" %c %d", &codigo, &nro_livros);
  if (codigo == 'a' || codigo == 'A')
    valor_total = nro_livros*10;
  else if (codigo == 'b' || codigo == 'B')
    valor_total = nro_livros*20;
  else if (codigo == 'c' || codigo == 'C')
    valor_total = nro_livros*30;
  else
    printf("Código Inexistente!\n")
  printf("o valor a pagar é de R$ %6.2f.\n", valor_total);
  if (nro_livros > 10)
    printf("Foram vendidas mais de 10 unidades do tipo %c.\n", codigo);
  return 0;
}
#+END_SRC


Veja código em [[./a05-exemplo-livros.c]]

#+attr_latex: :options fontsize=\tiny
#+BEGIN_SRC C :tangle e/a05-exemplo-livros.c
/* processa uma venda e avisa caso se mais de 10
unidades vendidas foram vendidas */
#include <stdio.h>
int main(){
  char codigo;
  int nro_livros;
  float apagar;

  printf("digite o codigo do produto e número de unidades:\n");
  scanf(" %c %d",&codigo, &nro_livros);

  if (codigo=='a' || codigo == 'A')
    apagar = nro_livros * 10;
  else if (codigo=='b' || codigo == 'B')
    apagar = nro_livros * 20;
  else if (codigo=='c' || codigo == 'C')
    apagar = nro_livros * 30;
  else
    printf("Codigo invalido!\n");

  printf("O valor a ser pago eh R$ %4.2f\n", apagar );
  if (nro_livros > 10)
    printf("Foram vendidas mais de 10 unidades!\n");
  return 0;
}
#+END_SRC

E se o código for inválido com mais de 10 unidades?

* Condicional com caminhos múltiplos, melhor

Veja código em [[./a05-exemplo-livros-melhor.c]]

#+attr_latex: :options fontsize=\tiny
#+BEGIN_SRC C :tangle e/a05-exemplo-livros-melhor.c
/* processa uma venda e avisa caso se mais de 10
unidades vendidas foram vendidas */
#include <stdio.h>
int main(){
  char codigo;
  int nro_livros;
  float apagar;

  printf("digite o codigo do produto e número de unidades:\n");
  scanf(" %c %d",&codigo, &nro_livros);

  if (codigo=='a' || codigo == 'A')
    apagar = nro_livros * 10;
  else if (codigo=='b' || codigo == 'B')
    apagar = nro_livros * 20;
  else if (codigo=='c' || codigo == 'C')
    apagar = nro_livros * 30;
  else {
    printf("Codigo invalido!\n");
    apagar = 0; // confirma ausência de pagamento!
  }

  if (apagar > 0){ // comandos ABAIXO executados apenas se ocorreu venda!
    printf("O valor a ser pago eh R$ %4.2f\n", apagar );
    if (nro_livros > 10)
      printf("Foram vendidas mais de 10 unidades!\n");
  }
  return 0;
}
#+END_SRC
* Uso da biblioteca =ctype.h= (funções =toupper=, =tolower=)

Múltiplos testes relacionais entre maiúscula e minúscula

#+BEGIN_SRC C
  if (codigo=='a' || codigo == 'A')
    apagar = nro_livros * 10;
  else if (codigo=='b' || codigo == 'B')
    apagar = nro_livros * 20;
  else if (codigo=='c' || codigo == 'C')
    apagar = nro_livros * 30;
#+END_SRC

Usar =toupper= (ou =tolower=)

#+BEGIN_SRC C
if (toupper(codigo) == 'A')
    apagar = nro_livros * 10;
  else if (toupper(codigo) == 'B')
    apagar = nro_livros * 20;
  else if (toupper(codigo) == 'C')
    apagar = nro_livros * 30;
#+END_SRC

#+latex: \pause

O que fazem exatamente estas funções?
- Lembrar da [[./img/asciifull.jpg][tabela ASCII]]

* Entender o funcionamento de =toupper=

Veja em [[./a05-toupper.c]]

#+BEGIN_SRC C :tangle e/a05-toupper.c
#include <stdio.h>
#include <ctype.h>
int main()
{
  char letra_peq = 'a';
  char letra_gra = 'A';

  printf("pequena %c é %d\n"
	 "grande %c é %d\n",
	 letra_peq, letra_peq,
	 letra_gra, letra_gra);

  int dif = letra_peq - letra_gra;
  printf("dif = %d\n", dif);
  printf("%c %c\n", letra_peq - dif, letra_gra + dif);	 
  return 0;
}
#+END_SRC

Conclusão
- O que faz =toupper=?
- O que faz =tolower=?

* Relembrando o problema dos quadrantes

Veja em [[./a05-exemplo-coordenadas.c]]

#+attr_latex: :options fontsize=\tiny
#+BEGIN_SRC C :tangle e/a05-exemplo-coordenadas.c
/* Obtem coordenadas e informa localização */
#include <stdio.h>
int main() {
  float x, y; //Entrada
  printf("Coordenadas: x = ");
  scanf("%f", &x);
  printf("e y = ");
  scanf("%f", &y);
  if ( x == 0 && y == 0 )
    printf("\n Ponto na origem");
  if ( x > 0 && y > 0 )
    printf("\n Ponto no quadrante 1");
  if ( x < 0 && y > 0 )
    printf("\n Ponto no quadrante 2");
  if ( x < 0 && y < 0 )
    printf("\n Ponto no quadrante 3");
  if ( x > 0 && y < 0 )
    printf("\n Ponto no quadrante 4");
  if ( x == 0 && y != 0 )
    printf("\n Ponto no eixo dos y");
  if ( x != 0 && y == 0 )
    printf("\n Ponto no eixo dos x");
  printf("\n");
  return 0;
}
#+END_SRC

* Empregando =if-else= (solução #1)

Veja em [[./a05-coordenadas-else.c]]

#+attr_latex: :options fontsize=\tiny
#+BEGIN_SRC C :tangle e/a05-coordenadas-else.c
/* Obtem coordenadas e informa localização */
#include <stdio.h>
int main() {
  float x, y; //Entrada
  printf("Coordenadas: x = ");
  scanf("%f", &x);
  printf("e y = ");
  scanf("%f", &y);
  if ( x == 0 && y == 0 )
    printf("\n Ponto na origem");
  else if ( x > 0 && y > 0 )
    printf("\n Ponto no quadrante 1");
  else if ( x < 0 && y > 0 )
    printf("\n Ponto no quadrante 2");
  else if ( x < 0 && y < 0 )
    printf("\n Ponto no quadrante 3");
  else if ( x > 0 && y < 0 )
    printf("\n Ponto no quadrante 4");
  else if ( x == 0 && y != 0 )
    printf("\n Ponto no eixo dos y");
  else // ( x != 0 && y == 0 ) nem precisa testar, sobrou
    printf("\n Ponto no eixo dos x");
  printf("\n");
  return 0;
}
#+END_SRC

* Comandos condicionais _aninhados_ 1/3

Um comando =if= (e suas variantes) é um comando como qualquer outro
- Pode portanto aparecer em qualquer lugar dentro de uma função

#+latex: \vfill

#+begin_src C
if (expressão) {
  //comandos
  if (expressão) {
    // comandos
    if (expressão) {
      // comandos
    }else{
      // comandos
    }
  }
  // comandos
}
#+end_src

* Comandos condicionais _aninhados_ 2/3

Chaves são obrigatórias somente se tivermos vários comandos no bloco

Podemos ``encadear'' expressões com o comando if

#+begin_src C
if (expressão1)
  if (expressão2)
    if (expressão3)
      //comando condicionado por expressão1, expressão2 e expressão3
#+end_src

#+latex: \vfill\pause

Forma alternativa (talvez melhor)

#+begin_src C
if (expressão1 && expressão2 && expressão3)
  //comando condicionado por expressão1, expressão2 e expressão3
#+end_src

* Comandos condicionais _aninhados_ 3/3

A ``omissão'' de chaves pode causar confusão

#+begin_src C
if (expressão1)     // if 1
  if (expressão2)   // if 2
    if (expressão3) // if 3
      //comando
    else  // -> Com qual if esse "else" se combina?
      //comando
#+end_src

#+latex: \vfill\pause

#+begin_center
Um =else= sempre se combina com o =if= mais

próximo que ainda não se combinou com nenhum =else=.
#+end_center

* Lembrando a seleção de caminho múltiplo =if-else if-else= (solução #1)

Veja em [[./a05-coordenadas-else.c]]

#+attr_latex: :options fontsize=\tiny
#+BEGIN_SRC C :tangle e/a05-coordenadas-else.c
/* Obtem coordenadas e informa localização */
#include <stdio.h>
int main() {
  float x, y; //Entrada
  printf("Coordenadas: x = ");
  scanf("%f", &x);
  printf("e y = ");
  scanf("%f", &y);
  if ( x == 0 && y == 0 )
    printf("\n Ponto na origem");
  else if ( x > 0 && y > 0 )
    printf("\n Ponto no quadrante 1");
  else if ( x < 0 && y > 0 )
    printf("\n Ponto no quadrante 2");
  else if ( x < 0 && y < 0 )
    printf("\n Ponto no quadrante 3");
  else if ( x > 0 && y < 0 )
    printf("\n Ponto no quadrante 4");
  else if ( x == 0 && y != 0 )
    printf("\n Ponto no eixo dos y");
  else // ( x != 0 && y == 0 ) nem precisa testar, sobrou
    printf("\n Ponto no eixo dos x");
  printf("\n");
  return 0;
}
#+END_SRC

* Empregando =if-else= (solução #2)

Veja em [[./a05-coordenadas-else-v2.c]]

#+attr_latex: :options fontsize=\tiny
#+BEGIN_SRC C :tangle e/a05-coordenadas-else-v2.c
/* Obtem coordenadas e informa localização */
#include <stdio.h>
int main() {
  float x, y; //Entrada
  printf("Coordenadas: x = ");
  scanf("%f", &x);
  printf("e y = ");
  scanf("%f", &y);

  // identifica origem e eixos
  if ( x == 0 ) // x = 0: possibilidade de origem ou eixo y
    if (y == 0 ) // y também = 0: localizou origem
      printf("\n Ponto na origem");
    else // só pode ser eixo y
      printf("\n Ponto no eixo dos y"); 
  else // x certamente é diferente de zero: não testa mais!
    if ( y == 0 ) // localizou eixo x
      printf("\n Ponto no eixo dos x");
    else // só sobraram os quadrantes!!!
      if ( x > 0 ) // quadrantes 1 ou 4, dependendo de y
	if ( y > 0 ) // quadrante 1
	  printf("\n Ponto no quadrante 1");
	else // quadrante 4, sem precisar mais testes
	  printf("\n Ponto no quadrante 4");
      else // x é < 0: sobraram quadrantes 2 e 3, dependendo de y
	if ( y > 0 )
	  printf("\n Ponto no quadrante 2");
	else // sobrou x < 0 e y < 0: não precisa testar
	  printf("\n Ponto no quadrante 3");
  printf("\n");
  return 0;
}
#+END_SRC

* Exercício para casa #1

Fazer o algoritmo e programa C para calcular e informar as raízes de
uma equação do 2º grau. Os valores das variáveis a, b e c devem ser
fornecidos via teclado.

#+latex: \vfill\pause

#+begin_example
1. Início
2. Ler A, B, C (os coeficientes)
3. Se A for 0
     // Escrever "não é equação do 2o grau"
   Senão
     Disc = B^2 - 4ac
     Se Disc < 0
       // Escrever "raizes imaginarias"
     Senão
       // Calcular R1 e R2
       // Escrever R1 e R2 para o usuário
4. Fim
#+end_example

* Exercício para casa #2 e #3

1. Faça o algoritmo e o programa C correspondente que recebe três
   valores reais, diferentes entre si, e imprime os três valores em
   ordem crescente.

2. Supondo que a variável =resultado= se inicie com o valor =20=. Fazer o
   trecho de um programa C que, dependendo do conteúdo de ``codigo'',
   atribua o conteúdo especificado na tabela abaixo à variável
   ``resultado''.

   #+latex: {\scriptsize
   | *codigo* | *resultado*         |
   |--------+-------------------|
   |      1 | resultado + 5     |
   |      2 | inalterado        |
   |      3 | resultado - 2     |
   |      4 | inalterado        |
   |      5 | resultado - 2     |
   |      6 | 2 * (resultado+1) |
   |      7 | inalterado        |
   |      8 | 0                 |
   |      9 | 0                 |
   |     10 | 0                 |
   |     11 | 123               |
   #+latex: }
   
